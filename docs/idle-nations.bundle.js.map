{"version":3,"sources":["webpack:///webpack/bootstrap 58cdd9523ceb76464070","webpack:///./src/client/app.js","webpack:///./src/shared/Nation.js","webpack:///./src/shared/Population.js","webpack:///./src/shared/Food.js","webpack:///./src/shared/Territory.js"],"names":["formatGameTime","gameTime","year","Math","floor","day","updateCurrentFigures","nation","document","querySelector","textContent","population","convertToGameTime","realTime","multiplier","startNation","food","territory","window","addEventListener","startTime","Date","now","lastTick","setInterval","thisTick","tickTime","tickLength","tickUpdate","sPopulation","Symbol","sFood","sTerritory","Nation","config","updateBirthRate","updateDeathRate","tickPopulationGrowth","sBirthRate","sDeathRate","sImmigrationRate","sEmmigrationRate","populationHunger","max","populationDensity","Number","POSITIVE_INFINITY","Population","startingPopulation","growthRate","birthRate","immigrationRate","deathRate","emmigrationRate","E","hunger","hFactor","log","density","dFactor","abs","fertility","sFactor","round","Food","startingFood","Territory","startingTerritory"],"mappings":"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","file":"idle-nations.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 58cdd9523ceb76464070","/**\n * Idle Nations behavior (testing)\n *\n * @copyright Bill Robitske, Jr. 2017\n * @author    Bill Robitske, Jr. <bill.robitske.jr@gmail.com>\n * @license   MIT\n */\nimport Nation from '../shared/Nation';\n// import ResourceView from './ResourceView';\n\nfunction formatGameTime(gameTime) {\n  const year = Math.floor(gameTime);\n  const day = Math.floor((gameTime - year) * 365);\n  return `Day ${day} of Year ${year}`;\n}\n\nfunction updateCurrentFigures(gameTime, nation) { // eslint-disable-line\n  document.querySelector('#currentDate').textContent = gameTime;\n  document.querySelector('#currentPopulation').textContent = nation.population.population;\n}\n\nfunction convertToGameTime(realTime = 0, multiplier = 1) {\n  return realTime / (1000 / multiplier);\n}\n\nfunction startNation() {\n  const nation = new Nation({\n    population: 10,\n    food: 10,\n    territory: 1,\n  });\n  updateCurrentFigures(formatGameTime(0), nation);\n  return nation;\n}\n\nwindow.addEventListener('load', () => {\n  const multiplier = 1;\n  let nation = startNation(); // eslint-disable-line\n\n  let startTime = Date.now(); // eslint-disable-line\n  let lastTick = startTime;\n  setInterval(() => {\n    const thisTick = Date.now();\n    const tickTime = convertToGameTime(thisTick - startTime, multiplier);\n    const tickLength = convertToGameTime(thisTick - lastTick, multiplier);\n    nation.tickUpdate(tickLength);\n    updateCurrentFigures(formatGameTime(tickTime), nation);\n    lastTick = thisTick;\n  }, 1000 / 60);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/app.js","/**\n * Nation module\n *\n * @module\n * @copyright Bill Robitske, Jr. 2017\n * @author    Bill Robitske, Jr. <bill.robitske.jr@gmail.com>\n * @license   MIT\n */\nimport Population from './Population';\nimport Food from './Food';\nimport Territory from './Territory';\n\n/**\n * Symbols for \"private\" properties\n */\nconst sPopulation = Symbol('population');\nconst sFood = Symbol('food');\nconst sTerritory = Symbol('territory');\n\n/**\n * Nation encapsulation\n * @class\n */\nexport default class Nation {\n\n  /**\n   * Creates a new nation model\n   * @constructor\n   * @param   {Object}  config\n   * @param   {Number}  config.population Starting population\n   * @param   {Number}  config.food       Starting food\n   * @return  {Nation}  Newly created nation\n   */\n  constructor(config = {}) {\n    this[sPopulation] = new Population(config.population || 10);\n    this[sFood] = new Food(config.food || 10);\n    this[sTerritory] = new Territory(config.territory || 1);\n  }\n\n  /**\n   * This nation's population model\n   * @member  {Population}\n   */\n  get population() {\n    return this[sPopulation];\n  }\n\n  /**\n   * This nation's food model\n   * @member  {Food}\n   */\n  get food() {\n    return this[sFood];\n  }\n\n  /**\n   * This nation's territory model\n   * @member  {Territory}\n   */\n  get territory() {\n    return this[sTerritory];\n  }\n\n  /**\n   * Updates this nation's population, food, etc. models\n   * @param   {Number}  tickLength  In-game years to progress in this tick\n   * @return  {Nation}  This nation\n   */\n  tickUpdate(tickLength = 1) {\n    this.population\n      .updateBirthRate(this.food.food, this.territory.territory)\n      .updateDeathRate(this.food.food, this.territory.territory);\n    this.population.tickPopulationGrowth(tickLength);\n    return this;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/Nation.js","/**\n * Population module\n *\n * @module\n * @copyright Bill Robitske, Jr. 2017\n * @author    Bill Robitske, Jr. <bill.robitske.jr@gmail.com>\n * @license   MIT\n */\n\n/**\n * Symbols for private data\n */\nconst sPopulation = Symbol('population');\nconst sBirthRate = Symbol('birthRate');\nconst sDeathRate = Symbol('deathRate');\nconst sImmigrationRate = Symbol('immigrationRate');\nconst sEmmigrationRate = Symbol('emmigrationRate');\n\n/**\n * Calculates the percentage of a population that is going hungry\n *\n * @private\n * @param   {Number}  population  Total population\n * @param   {Number}  food        Total food\n * @return  {Number}  Percentage of the population going hungry\n */\nfunction populationHunger(population = 1, food = 0) {\n  return population > 0 ? Math.max(population - food, 0) / population : 0;\n}\n\n/**\n * Calculates the population density\n *\n * @private\n * @param   {Number}  population  Total population\n * @param   {Number}  territory   Total territory\n * @return  {Number}  Population density\n */\nfunction populationDensity(population = 0, territory = 1) {\n  return territory > 0 ? population / territory : Number.POSITIVE_INFINITY;\n}\n\n/**\n * Population encapsulation\n *\n * @class\n */\nexport default class Population {\n  constructor(startingPopulation = 1) {\n    this[sPopulation] = startingPopulation;\n    this[sBirthRate] = 0;\n    this[sDeathRate] = 0;\n    this[sImmigrationRate] = 0;\n    this[sEmmigrationRate] = 0;\n  }\n\n  /**\n   * Retrieve the current population\n   *\n   * @return  {Number}      Current population\n   */\n  get population() {\n    return Math.round(this[sPopulation]);\n  }\n\n  /**\n   * Retrive the current birth rate\n   *\n   * @return  {Number}      Current birth rate\n   */\n  get birthRate() {\n    return this[sBirthRate];\n  }\n\n  /**\n   * Retrieve the current death rate\n   *\n   * @return  {Number}      Current death rate\n   */\n  get deathRate() {\n    return this[sDeathRate];\n  }\n\n  /**\n   * Retrieve current immigration rate\n   *\n   * @return  {Number}      Current immigration rate\n   */\n  get immigrationRate() {\n    return this[sImmigrationRate];\n  }\n\n  /**\n   * Retrieve current emmigration rate\n   *\n   * @return  {Number}      Current emmigration rate\n   */\n  get emmigrationRate() {\n    return this[sEmmigrationRate];\n  }\n\n  /**\n   * Updates the current population based on the current birth rate, death rate,\n   * immigration rate, and emmigration rate.\n   *\n   * @param   {Number}      tickLength  Length of the tick (in \"years\")\n   * @return  {Population}  This population encapsulation\n   */\n  tickPopulationGrowth(tickLength) {\n    const growthRate = (this.birthRate + this.immigrationRate) -\n      (this.deathRate + this.emmigrationRate);\n    this[sPopulation] *= Math.E ** (growthRate * tickLength);\n    return this;\n  }\n\n  /**\n   * Updates the current birth rate based on the current population, food, and\n   * territory.\n   *\n   * @param   {Number}      food        Current food\n   * @param   {Number}      territory   Current territory\n   * @return  {Population}  This population encapsulation\n   */\n  updateBirthRate(food = 1, territory = 1) {\n    const hunger = populationHunger(this.population, food);\n    const hFactor = (Math.log(1 + ((Math.E - 1) * hunger)) * 2) + 1;\n    const density = populationDensity(this.population, territory);\n    const dFactor = 1 - Math.abs(Math.log((Math.E ** -3) +\n      ((Math.E - (Math.E ** -3)) * (density / 35))));\n    // const dFactor = density > 0 ? Math.log(1 + ((Math.E - 1) * (density / 35))) : 1;\n    const fertility = (2 * hFactor) + dFactor;\n    this[sBirthRate] = fertility / 45;\n    return this;\n  }\n\n  /**\n   * Updates the current death rate based on the current population, food, and\n   * territory.\n   *\n   * @param   {Number}      food        Current food\n   * @param   {Number}      territory   Current territory\n   * @return  {Population}  This population encapsulation\n   */\n  updateDeathRate(food = 1, territory = 1) {\n    const hunger = populationHunger(this.population, food);\n    const hFactor = (Math.log(1 + ((Math.E - 1) * hunger)) * 5) + 1;\n    const density = populationDensity(this.population, territory);\n    const sFactor = 0.00001326 - (Math.log(1 + ((Math.E - 1) * (density / 777))) * 0.00001326);\n    this[sDeathRate] = ((1 / 70) * hFactor) + sFactor;\n    return this;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/Population.js","/**\n * Food module\n *\n * @module\n * @copyright Bill Robitske, Jr. 2017\n * @author    Bill Robitske, Jr. <bill.robitske.jr@gmail.com>\n * @license   MIT\n */\n\n/**\n * Symbols for \"private\" properties\n */\nconst sFood = Symbol('food');\n\n/**\n * Food encapsulation\n * @class\n */\nexport default class Food {\n\n  /**\n   * Creates a new food model\n   * @constructor\n   * @param   {Number}  startingFood  Starting food\n   * @return  {Food}    Newly created food model\n   */\n  constructor(startingFood = 1) {\n    this[sFood] = startingFood;\n  }\n\n  /**\n   * Total food\n   * @member  {Number}\n   */\n  get food() {\n    return Math.round(this[sFood]);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/Food.js","/**\n * Territory module\n *\n * @module\n * @copyright Bill Robitske, Jr. 2017\n * @author    Bill Robitske, Jr. <bill.robitske.jr@gmail.com>\n * @license   MIT\n */\n\n/**\n * Symbols for \"private\" properties\n */\nconst sTerritory = Symbol('territory');\n\n/**\n * Territory encapsulation\n * @class\n */\nexport default class Territory {\n\n  /**\n   * Creates a new territory model\n   * @constructor\n   * @param   {Number}    startingTerritory Starting territory\n   * @return  {Territory} Newly created territory\n   */\n  constructor(startingTerritory = 1) {\n    this[sTerritory] = startingTerritory;\n  }\n\n  /**\n   * Current ammount of territory\n   * @member  {Number}\n   */\n  get territory() {\n    return Math.round(this[sTerritory]);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/Territory.js"],"sourceRoot":""}